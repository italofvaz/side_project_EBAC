# -*- coding: utf-8 -*-
"""Projeto_Analise_tips.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KeXA_TXaTkljXv4u7MIHuMuiLOqnR-k8

1.Com base no briefing, defina qual a problemática do dia a dia escolhida para desenvolver este projeto.

2.Levante as fontes de dados públicas e não confidenciais para a coleta de informações.

Problema: Prever o valor da gorjeta com base em informações do cliente
Descrição: Restaurantes e estabelecimentos que dependem de gorjetas para os funcionários podem se beneficiar de um sistema que analisa padrões de pagamento. A análise de dados e Machine Learning podem ajudar a prever o valor da gorjeta que um cliente pode dar, com base em informações como:

Total da conta.
Gênero do cliente.
Dia da semana.
Se o cliente está sozinho ou em grupo.
"""

import sklearn
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn import tree
from sklearn.model_selection import train_test_split

from sklearn.tree import DecisionTreeClassifier
from sklearn.tree import DecisionTreeRegressor

from sklearn.metrics import confusion_matrix
from sklearn.metrics import ConfusionMatrixDisplay

from sklearn.metrics import accuracy_score, classification_report

# Carregar o dataset
data = sns.load_dataset('tips')

data.head()

data = data[["total_bill", "tip", "sex", "time", "size"]]

não existem dados nulos

data[data.isnull().any(axis=1)]

data.head()

"""Efetue a análise exploratória dos dados levantando os principais pontos relevantes para a solução do problema.

Justifique os principais pontos escolhidos para a solução do problema e descreva sua relevância
"""



"""PROBLEMAS:

**Prever a possibilidade de receber boas gorgetas com base nas informações fornecidas.**
Verificar a correlação entre tip e outras variáveis
Analisar a influência de variáveis categóricas como day e time na gorjeta média.
Identificar outliers e padrões nos dados.
"""

with sns.axes_style('whitegrid'):

  grafico = sns.pairplot(data=data, hue="time", palette="pastel")

sns.scatterplot(x='total_bill', y='tip', data=data, hue='time')
plt.title('Gorjeta vs Total da Conta')
plt.show()

sns.barplot(x='sex', y='tip', data=data)
plt.title('Média de gorjetas por gênero')
plt.show()

sns.boxplot(x='day', y='tip', data=data)
plt.title('Gorjetas por dia da semana')
plt.show()

"""Observacoes:

1. no jantar recebe-se mais gorgetas
2. domingo recebe-se mais gorgetas
3. contas a baixo de 30 dolares tendem a receber mais gorgetas
4. pessoas do sexo masculino dão mais gorgetas
5. mesas com 2 a 4 pessoas tendem a dar mais gorgetas

# **predição com Machine Learning**

1. Construa um aprendizado de máquina ou modelo estatístico.
2. Avalie o modelo estatístico através de técnicas de modelagem
3. Apresente uma visualização de dados com os resultados obtidos.
"""

data.head()

#tratando a base

data['sex_m_nom'] = data['sex'].apply(lambda x : 1 if x == 'Male' else 0)
data['sex_f_nom'] = data['sex'].apply(lambda x : 1 if x == 'Female' else 0)

data['time_dinner'] = data['time'].apply(lambda x : 1 if x == 'Dinner' else 0)
data['time_lunch'] = data['time'].apply(lambda x : 1 if x == 'Lunch' else 0)

data['day_sun'] = data['day'].apply(lambda x : 1 if x == 'Sun' else 0)
data['day_sat'] = data['day'].apply(lambda x : 1 if x == 'Sat' else 0)
data['day_tru'] = data['day'].apply(lambda x : 1 if x == 'Thur' else 0)
data['day_fri'] = data['day'].apply(lambda x : 1 if x == 'Fri' else 0)

data['day'].drop_duplicates()

data.head()

# Uma gorjeta é considerada "boa" se for maior que 15% do total da conta.
# Criar a coluna 'good_tip' (1 = boa gorjeta, 0 = gorjeta ruim)

data['good_tips'] = np.where((data['tip']/data['total_bill']) > 0.15, 1, 0)

# Separando dados de interesse
data = data[["good_tips", "total_bill", "tip", "sex_m_nom", "sex_f_nom", "time_dinner", "time_lunch", "day_sun", "day_sat", "day_tru", "day_fri"]]

data.head(50)

"""**Treino/Teste**"""

predictors_train, predictors_test, target_train, target_test = train_test_split(
    data.drop(['good_tips'], axis=1),
    data['good_tips'],
    test_size=0.25,
    random_state=123
)

target_train.head()

model = DecisionTreeClassifier()
model = model.fit(predictors_train, target_train)

model.__dict__

target_predicted = model.predict(predictors_test)
confusion_matrix= confusion_matrix(target_test, target_predicted)
print(confusion_matrix)

"""Interpretação das Probabilidades:
Valores próximos a 1 indicam alta confiança de que a gorjeta é boa.
Valores próximos a 0 indicam que a gorjeta é ruim.
"""

acuracy = accuracy_score(target_test, target_predicted)
print(f"{round(100*acuracy, 2)}%")

from xgboost import XGBClassifier
from xgboost import plot_importance
from matplotlib import pyplot

# fit model no training data
model = XGBClassifier(enable_categorical=True)
model.fit(predictors_train, target_train)
# plot feature importance
plot_importance(model)
pyplot.show()

"""Como Interpretar o Gráfico: A importância das variáveis mede o quanto cada variável contribui para uma boa gorgeta.

Variáveis no topo:
São as mais importantes para o modelo.
"""

import os

username = "italofvaz" # insira o seu nome de usuário do git
os.environ["GITHUB_USER"] = username

!git config --global user.name "${GITHUB_USER}"

from getpass import getpass

usermail = getpass()
os.environ["GITHUB_MAIL"] = usermail

!git config --global user.email "${GITHUB_MAIL}"

usertoken = getpass()
os.environ["GITHUB_TOKEN"] = usertoken

!git clone https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/italofvaz/side_project_EBAC.git

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/side_project_EBAC/

!git add .

!git commit -m "subindo arquivo final"

!git push origin main